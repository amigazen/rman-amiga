@database PolyglotMan
@master "PolyglotMan.1"
@remark "manual page source format generated by PolyglotMan v3.2 available at http://polyglotman.sourceforge.net/"
@wordwrap
@tab 8
@index "PolyglotMan command"
@index "man page conversion"
@index "AmigaGuide format"
@index "Unix documentation"

@node sect0 "Name"
@prev overview
@toc main
@index " section"
PolyglotMan, rman - reverse compile man pages from formatted  form to a number of source formats  
@endnode

@node sect1 "Synopsis"
@prev sect0
@toc main
@index " section"
rman [ @{i}options @{ui}] [ @{i}file @{ui}]  
@endnode

@node sect2 "Description"
@prev sect1
@toc main
@index " section"
Up-to-date instructions can be found at http://polyglotman.sourceforge.net/rman.html  @{i}PolyglotMan @{ui} takes man pages from most of the popular flavors  of UNIX and transforms them into any of a number of text source  formats. PolyglotMan was formerly known as RosettaMan. The name  of the binary is still called @{i}rman @{ui}, for scripts that depend  on that name; mnemonically, just think "reverse man". Previously @{i} PolyglotMan @{ui} required pages to be formatted by nroff prior  to its processing. With version 3.0, it @{i}prefers [tn]roff source @{ui} and usually produces results that are better yet. And source  processing is the only way to translate tables. Source format  translation is not as mature as formatted, however, so try formatted  translation as a backup.  

In parsing [tn]roff source, one could implement an arbitrarily  large subset of [tn]roff, which I did not and will not do, so  the results can be off. I did implement a significant subset  of those use in man pages, however, including tbl (but not eqn),  if tests, and general macro definitions, so usually the results  look great. If they don't, format the page with nroff before  sending it to PolyglotMan. If PolyglotMan doesn't recognize a  key macro used by a large class of pages, however, e-mail me  the source and a uuencoded nroff-formatted page and I'll see  what I can do. When running PolyglotMan with man page source  that includes or redirects to other [tn]roff source using the .so (source  or inclusion) macro, you should be in the parent directory of  the page, since pages are written with this assumption. For example,  if you are translating /usr/man/man1/ls.1, first cd into /usr/man.  

@{i}PolyglotMan @{ui} accepts man pages from: SunOS, Sun Solaris,  Hewlett-Packard HP-UX, AT&T System V, OSF/1 aka Digital UNIX,  DEC Ultrix, SGI IRIX, Linux, FreeBSD, SCO. Source processing  works for: SunOS, Sun Solaris, Hewlett-Packard HP-UX, AT&T System  V, OSF/1 aka Digital UNIX, DEC Ultrix. It can produce printable  ASCII-only (control characters stripped), section headers-only,  Tk, TkMan, [tn]roff (traditional man page source), SGML, HTML,  MIME, LaTeX, LaTeX2e, RTF, Perl 5 POD, and AmigaGuide. A modular architecture  permits easy addition of additional output formats.  

The latest version of PolyglotMan is available from @{i} http://polyglotman.sourceforge.net/ @{ui}.  


@endnode

@node sect3 "Options"
@prev sect2
@toc main
@index " section"
The following options should not be used with any others and  exit PolyglotMan without processing any input.  

@{bullet} -h|--help  @{lindent 3}
Show list of command line options and exit.  @{lindent 0}

@{bullet} -v|--version  @{lindent 3}
Show version number and exit.  @{lindent 0}

@{i}You should specify the filter first, as this sets a number  of parameters, and then specify other options.  



@{bullet} -f|--filter <ASCII|roff|TkMan|Tk|Sections|HTML|SGML|MIME|LaTeX|LaTeX2e|RTF|POD|AmigaGuide>  @{ui}@{lindent 3}
Set the output filter. Defaults to ASCII.  @{lindent 0}

@{bullet} -S|--source  @{lindent 3}
PolyglotMan tries to automatically determine whether its input  is source or formatted; use this option to declare source input.  @{lindent 0}

@{bullet} -F|--format|--formatted  @{lindent 3}
PolyglotMan tries to automatically determine whether its input  is source or formatted; use this option to declare formatted  input.  @{lindent 0}

@{bullet} -l|--title @{i}printf-string @{ui} @{lindent 3}
In HTML mode this sets the <TITLE> of the man pages, given the  same parameters as @{i}-r @{ui}.  @{lindent 0}

@{bullet} -r|--reference|--manref @{i}printf-string @{ui} @{lindent 3}
In HTML and SGML modes this sets the URL form by which to retrieve  other man pages. The string can use two supplied parameters:  the man page name and its section. (See the Examples section.)  If the string is null (as if set from a shell by "-r ''"), `-'  or `off', then man page references will not be HREFs, just set  in italics. If your printf supports XPG3 positions specifier,  this can be quite flexible.  @{lindent 0}

@{bullet} -V|--volumes @{i}<colon-separated list> @{ui} @{lindent 3}
Set the list of valid volumes to check against when looking for  cross-references to other man pages. Defaults to @{i}1:2:3:4:5:6:7:8:9:o:l:n:p @{ui}(volume  names can be multicharacter). If an non-whitespace string in  the page is immediately followed by a left parenthesis, then  one of the valid volumes, and ends with optional other characters  and then a right parenthesis--then that string is reported as  a reference to another manual page. If this -V string starts  with an equals sign, then no optional characters are allowed  between the match to the list of valids and the right parenthesis. (This  option is needed for SCO UNIX.)  @{lindent 0}

The following options apply only when formatted pages are given  as input. They do not apply or are always handled correctly with  the source.  



@{bullet} -b|--subsections  @{lindent 3}
Try to recognize subsection titles in addition to section titles.  This can cause problems on some UNIX flavors.  @{lindent 0}

@{bullet} -K|--nobreak  @{lindent 3}
Indicate manual pages don't have page breaks, so don't look for  footers and headers around them. (Older nroff -man macros always  put in page breaks, but lately some vendors have realized that  printout are made through troff, whereas nroff -man is used to  format pages for reading on screen, and so have eliminated page  breaks.) @{i}PolyglotMan @{ui} usually gets this right even without  this flag.  @{lindent 0}

@{bullet} -k|--keep  @{lindent 3}
Keep headers and footers, as a canonical report at the end of  the page. changeleft  Move changebars, such as those found in the Tcl/Tk manual pages,  to the left. --> notaggressive  @{i}Disable @{ui} aggressive man page parsing. Aggressive manual,  which is on by default, page parsing elides headers and footers,  identifies sections and more. -->  @{lindent 0}

@{bullet} -n|--name @{i}name @{ui} @{lindent 3}
Set name of man page (used in roff format). If the filename is  given in the form " @{i}name @{ui}. @{i}section @{ui}", the name and  section are automatically determined. If the page is being parsed  from [tn]roff source and it has a .TH line, this information  is extracted from that line.  @{lindent 0}

@{bullet} -p|--paragraph  @{lindent 3}
paragraph mode toggle. The filter determines whether lines should  be linebroken as they were by nroff, or whether lines should  be flowed together into paragraphs. Mainly for internal use.  @{lindent 0}

@{bullet} -s|section @{i}# @{ui} @{lindent 3}
Set volume (aka section) number of man page (used in roff format).  tables  Turn on aggressive table parsing. -->  @{lindent 0}

@{bullet} -t|--tabstops @{i}# @{ui} @{lindent 3}
For those macros sets that use tabs in place of spaces where  possible in order to reduce the number of characters used, set  tabstops every @{i}# @{ui} columns. Defaults to 8.  @{lindent 0}


@endnode

@node sect4 "Notes on Filter Types"
@prev sect3
@toc main
@index " section"


@{b}Roff@{ub}

Some flavors of UNIX ship man page without [tn]roff source, making  one's laser printer little more than a laser-powered daisy wheel.  This filer tries to intuit the original [tn]roff directives,  which can then be recompiled by [tn]roff.  

@{b}TkMan@{ub}

TkMan, a hypertext man page browser, uses @{i}PolyglotMan @{ui}  to show man pages without the (usually) useless headers and footers  on each pages. It also collects section and (optionally) subsection  heads for direct access from a pulldown menu. TkMan and Tcl/Tk,  the toolkit in which it's written, are available via anonymous  ftp from @{i}ftp://ftp.smli.com/pub/tcl/ @{ui} 

@{b}Tk@{ub}

This option outputs the text in a series of Tcl lists consisting  of text-tags pairs, where tag names roughly correspond to HTML.  This output can be inserted into a Tk text widget by doing an @{i} eval <textwidget> insert end <text> @{ui}. This format should be  relatively easily parsible by other programs that want both the  text and the tags. Also see ASCII.  

@{b}Ascii@{ub}

When printed on a line printer, man pages try to produce special  text effects by overstriking characters with themselves (to produce  bold) and underscores (underlining). Other text processing software,  such as text editors, searchers, and indexers, must counteract  this. The ASCII filter strips away this formatting. Piping nroff  output through @{i}col -b @{ui} also strips away this formatting,  but it leaves behind unsightly page headers and footers. Also  see Tk.  

@{b}Sections@{ub}

Dumps section and (optionally) subsection titles. This might  be useful for another program that processes man pages.  

@{b}HTML@{ub}

With a simple extention to an HTTP server for Mosaic or other  World Wide Web browser, @{i}PolyglotMan @{ui} can produce high quality  HTML on the fly. Several such extensions and pointers to several  others are included in @{i}PolyglotMan @{ui}'s @{i}contrib @{ui} directory.  

@{b}Sgml@{ub}

This is appoaching the Docbook DTD, but I'm hoping that someone  that someone with a real interest in this will polish the tags  generated. Try it to see how close the tags are now.  

@{b}MIME@{ub}

MIME (Multipurpose Internet Mail Extensions) as defined by RFC 1563,  good for consumption by MIME-aware e-mailers or as Emacs (>=19.29)  enriched documents.  

@{b}LaTeX and LaTeX2e@{ub}

Why not?  

@{b}Rtf@{ub}

Use output on Mac or NeXT or whatever. Maybe take random man  pages and integrate with NeXT's documentation system better.  Maybe NeXT has own man page macros that do this.  

@{b}AmigaGuide@{ub}

Produces AmigaGuide format files (.guide) for use on Amiga systems.  AmigaGuide is Amiga OS's native hypertext documentation format,  introduced in 1990. The generated files include proper navigation  links (@next, @prev, @toc), working cross-references to other  man pages, and a functional table of contents. AmigaGuide files  can be viewed with MultiView or any AmigaGuide-compatible viewer.  This filter is particularly useful for creating native Amiga documentation  from Unix man pages, providing a familiar hypertext experience  for Amiga users.  

@{b}PostScript and FrameMaker@{ub}

To produce PostScript, use @{i}groff @{ui} or @{i}psroff @{ui}. To  produce FrameMaker MIF, use FrameMaker's builtin filter. In both  cases you need @{i}[tn]roff @{ui} source, so if you only have a  formatted version of the manual page, use @{i}PolyglotMan @{ui}'s  roff filter first.  
@endnode

@node sect5 "Examples"
@prev sect4
@toc main
@index " section"
To convert the @{i}formatted @{ui} man page named @{i}ls.1 @{ui} back  into [tn]roff source form:  @{i}rman -f roff /usr/local/man/cat1/ls.1 > /usr/local/man/man1/ls.1 @{ui} 


Long man pages are often compressed to conserve space (compression  is especially effective on formatted man pages as many of the  characters are spaces). As it is a long man page, it probably  has subsections, which we try to separate out (some macro sets  don't distinguish subsections well enough for @{i}PolyglotMan @{ui} to detect them). Let's convert this to LaTeX format:  


@{i}pcat /usr/catman/a_man/cat1/automount.z | rman -b -n automount -s 1 -f  latex > automount.man @{ui} 


Alternatively, @{i}man 1 automount | rman -b -n automount -s 1 -f  latex > automount.man @{ui} 


For HTML/Mosaic users, @{i}PolyglotMan @{ui} can, without modification  of the source code, produce HTML links that point to other HTML  man pages either pregenerated or generated on the fly. First  let's assume pregenerated HTML versions of man pages stored in @{i}/usr/man/html @{ui}.  Generate these one-by-one with the following form:  
@{i}rman -f html -r 'http:/usr/man/html/%s.%s.html' /usr/man/cat1/ls.1 > /usr/man/html/ls.1.html @{ui} 


If you've extended your HTML client to generate HTML on the fly  you should use something like:  
@{i}rman -f html -r 'http:~/bin/man2html?%s:%s' /usr/man/cat1/ls.1 @{ui} 
when generating HTML.  

To convert a man page to AmigaGuide format for use on Amiga systems: 
@{i}rman -f AmigaGuide /usr/man/man1/rman.1 >rman.guide @{ui} 
The resulting .guide file can be opened with MultiView or any AmigaGuide viewer.  


@endnode

@node sect6 "Bugs/Incompatibilities"
@prev sect5
@toc main
@index " section"
@{i}PolyglotMan @{ui} is not perfect in all cases, but it usually  does a good job, and in any case reduces the problem of converting  man pages to light editing.  Tables in formatted pages, especially H-P's, aren't handled very  well. Be sure to pass in source for the page to recognize tables.  

The man pager @{i}woman @{ui} applies its own idea of formatting  for man pages, which can confuse @{i}PolyglotMan @{ui}. Bypass @{i} woman @{ui} by passing the formatted manual page text directly  into @{i}PolyglotMan @{ui}.  

The [tn]roff output format uses fB to turn on boldface. If your  macro set requires .B, you'll have to a postprocess the @{i}PolyglotMan @{ui} output.  

AmigaGuide output requires Amiga OS with AmigaGuide.library v39+  for proper viewing. The generated files follow AmigaGuide standards  and include proper navigation between sections.  


@endnode

@node sect7 "See Also"
@prev sect6
@toc main
@index " section"
@{"tkman(1)" link tkman1 @index "tkman"}@{i}tkman(1) @{ui}, @{"xman(1)" link xman1 @index "xman"}@{i}xman(1) @{ui}, @{"man(1)" link man1 @index "man"}@{i}man(1) @{ui}, @{"man(7)" link man7 @index "man"}@{i}man(7) @{ui} or @{"man(5)" link man5 @index "man"}@{i}man(5) @{ui} depending on your flavor of UNIX  
@endnode

@node sect8 "Author"
@prev sect7
@toc main
@index "man section"
PolyglotMan  
by Thomas A. Phelps ( @{i}phelps@ACM.org @{ui})  
developed at the  
University of California, Berkeley  
Computer Science Division  Manual page last updated on $Date: 1998/07/13 09:47:28 $  

AmigaGuide support added by Chris Young <chris@unsatisfactorysoftware.co.uk>  and enhanced for proper AmigaGuide structure and navigation by amigazen project 


@endnode
@node overview "Overview"
@next sect0
@prev main
@toc main

@{b}PolyglotMan@{ub} is a powerful tool for converting Unix manual pages between different formats. It can read man pages in various formats and output them as HTML, LaTeX, RTF, AmigaGuide, and many other formats.

This manual describes how to use PolyglotMan to convert your Unix documentation to AmigaGuide format for use on Amiga systems.

@{b}Key Features:@{ub}
@{bullet} Convert Unix man pages to AmigaGuide format
@{bullet} Support for multiple input formats
@{bullet} Preserve formatting and structure
@{bullet} Create native Amiga documentation

@endnode

@node main "PolyglotMan(1)"
@next overview
@{b}Table of Contents@{ub}

@{"Overview" link overview}
@{"Name" link sect0}
@{"Synopsis" link sect0}
@{"Description" link sect0}
@{"Options" link sect0}
@{"Notes on Filter Types" link sect0}
@{lindent 3}
Roff
TkMan
Tk
Ascii
Sections
HTML
Sgml
MIME
LaTeX and LaTeX2e
Rtf
AmigaGuide
PostScript and FrameMaker
@{lindent 0}
@{"Examples" link sect1}
@{"Bugs/Incompatibilities" link sect1}
@{"See Also" link sect1}
@{"Author" link sect1}

@endnode
